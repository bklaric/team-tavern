module TeamTavern.Server.Profile.AddPlayerProfile.ValidatePlatformId where

-- import Prelude

-- import Data.Array as Array
-- import Data.List.NonEmpty (notElem)
-- import Data.List.NonEmpty as NEL
-- import Type.Proxy (Proxy(..))
-- import Data.Validated as Validated
-- import Data.Validated.Label (ValidatedVariants)
-- import Data.Validated.Label as ValidatedL
-- import Data.Variant (inj)
-- import TeamTavern.Routes.Shared.Platform (Platform(..), Platforms)
-- import TeamTavern.Server.Profile.Infrastructure.ValidateBattleTag (BattleTag, validateBattleTag)
-- import TeamTavern.Server.Profile.Infrastructure.ValidateBattleTag as BattleTag
-- import TeamTavern.Server.Profile.Infrastructure.ValidateFriendCode (FriendCode, validateFriendCode)
-- import TeamTavern.Server.Profile.Infrastructure.ValidateFriendCode as FriendCode
-- import TeamTavern.Server.Profile.Infrastructure.ValidateGamerTag (GamerTag, validateGamerTag)
-- import TeamTavern.Server.Profile.Infrastructure.ValidateGamerTag as GamerTag
-- import TeamTavern.Server.Profile.Infrastructure.ValidatePsnId (PsnId, validatePsnId)
-- import TeamTavern.Server.Profile.Infrastructure.ValidatePsnId as PsnId
-- import TeamTavern.Server.Profile.Infrastructure.ValidateRiotId (RiotId, validateRiotId)
-- import TeamTavern.Server.Profile.Infrastructure.ValidateRiotId as RiotId
-- import TeamTavern.Server.Profile.Infrastructure.ValidateSteamId (SteamId, validateSteamId)
-- import TeamTavern.Server.Profile.Infrastructure.ValidateSteamId as SteamId

-- data PlatformId
--     = SteamId SteamId
--     | RiotId RiotId
--     | BattleTag BattleTag
--     | PsnId PsnId
--     | GamerTag GamerTag
--     | FriendCode FriendCode

-- toString :: PlatformId -> String
-- toString (SteamId steamId) = SteamId.toString steamId
-- toString (RiotId riotId) = RiotId.toString riotId
-- toString (BattleTag battleTag) = BattleTag.toString battleTag
-- toString (PsnId psnId) = PsnId.toString psnId
-- toString (GamerTag gamerTag) = GamerTag.toString gamerTag
-- toString (FriendCode friendCode) = FriendCode.toString friendCode

-- validatePlatformId
--     :: forall errors
--     .  Platforms
--     -> Platform
--     -> String
--     -> ValidatedVariants (platformId :: Array String | errors) PlatformId
-- validatePlatformId platforms platform platformId =
--     case platform of
--     _ | notElem platform $ Array.cons platforms.head platforms.tail ->
--         Validated.invalid $ NEL.singleton $ inj (Proxy :: _ "platformId")
--         [ "Error validating platform id, profile platform doesn't match any game platforms."
--         , "Profile platform: " <> show platform
--         , "Game platforms: " <> show platforms
--         ]
--     Steam -> validateSteamId platformId
--         <#> SteamId
--         # Validated.fromEither
--         # ValidatedL.label (Proxy :: _ "platformId")
--     Riot -> validateRiotId platformId
--         <#> RiotId
--         # Validated.fromEither
--         # ValidatedL.label (Proxy :: _ "platformId")
--     BattleNet -> validateBattleTag platformId
--         <#> BattleTag
--         # Validated.fromEither
--         # ValidatedL.label (Proxy :: _ "platformId")
--     PlayStation -> validatePsnId platformId
--         <#> PsnId
--         # Validated.fromEither
--         # ValidatedL.label (Proxy :: _ "platformId")
--     Xbox -> validateGamerTag platformId
--         <#> GamerTag
--         # Validated.fromEither
--         # ValidatedL.label (Proxy :: _ "platformId")
--     Switch -> validateFriendCode platformId
--         <#> FriendCode
--         # Validated.fromEither
--         # ValidatedL.label (Proxy :: _ "platformId")
